<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2024-5932/CVE-2024-8353 wordpress givewp漏洞分析</title>
    <url>/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言">前言</h2>
<p>CVE-2024-8353相对于CVE-2024-5932，多了部分绕过的样子，核心利用还是不变的。这个漏洞是个人开发工具的时候作为样本测试分析的，因此没有关注里面的绕过内容。为什么用CVE-2024-8353呢，因为在使用CVE-2024-5932的poc的时候发现无法成功，即使我版本啥的都没问题也还是没成，后续用CVE-2024-8353能够触发payload，因此用它来分析了。</p>
<p>那么正式开始正文，总的来说，在默认设置下，捐款的时候新用户（新的邮箱）会收到一份邮件，该邮件模板中存在{name}，会到达我们的漏洞函数中触发toString方法从而完成pop链</p>
<span id="more"></span>
<h2 id="业务流程分析">业务流程分析</h2>
<ol type="1">
<li>创建 捐款表单</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094406119.png" alt="image-20250102094406119">
<figcaption aria-hidden="true">image-20250102094406119</figcaption>
</figure>
<ol start="2" type="1">
<li>虽然各种类型表单都行，我们payload中修改表单id号都能用，但是第二个classic
form发送到请求包才是我们要的格式</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094424113.png" alt="image-20250102094424113">
<figcaption aria-hidden="true">image-20250102094424113</figcaption>
</figure>
<ol start="3" type="1">
<li>默认设置就行，添加名字，然后直接发布</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094559148.png" alt="image-20250102094559148">
<figcaption aria-hidden="true">image-20250102094559148</figcaption>
</figure>
<ol start="4" type="1">
<li>回到all forms页面，我们能发现已经有我们刚创建的表单了</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094613022.png" alt="image-20250102094613022">
<figcaption aria-hidden="true">image-20250102094613022</figcaption>
</figure>
<ol start="5" type="1">
<li>创建新的文章，添加该表单</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094630672.png" alt="image-20250102094630672">
<figcaption aria-hidden="true">image-20250102094630672</figcaption>
</figure>
<p>成功</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094643317.png" alt="image-20250102094643317">
<figcaption aria-hidden="true">image-20250102094643317</figcaption>
</figure>
<p>6.捐100，填好以下内容，然后发送请求包（名字不能有数字）</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094721039.png" alt="image-20250102094721039">
<figcaption aria-hidden="true">image-20250102094721039</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094727371.png" alt="image-20250102094727371">
<figcaption aria-hidden="true">image-20250102094727371</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094751845.png" alt="image-20250102094751845">
<figcaption aria-hidden="true">image-20250102094751845</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094849198.png" alt="image-20250102094849198">
<figcaption aria-hidden="true">image-20250102094849198</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094816655.png" alt="image-20250102094816655">
<figcaption aria-hidden="true">image-20250102094816655</figcaption>
</figure>
<p>所以我们入口函数从 give_process_donation_form() 开始</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094830367.png" alt="image-20250102094830367">
<figcaption aria-hidden="true">image-20250102094830367</figcaption>
</figure>
<ol start="7" type="1">
<li>在进入正式的代码跟踪前，先说明到底发生了什么。</li>
</ol>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102094911931.png" alt="image-20250102094911931">
<figcaption aria-hidden="true">image-20250102094911931</figcaption>
</figure>
<p>根据描述，发送给新的，使用offline donation的用户（新邮箱）。</p>
<p>除此外我们也能在form表单中的设置中查看到，可以选择全局定义的邮件，就是上图。或是自定义的邮件。</p>
<p>默认使用全局。</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095134290.png" alt="image-20250102095134290">
<figcaption aria-hidden="true">image-20250102095134290</figcaption>
</figure>
<p>点进去该New Offline
Donation发现其邮件内容是使用了{name}标签，在处理该标签的函数中存在我们的漏洞点，触发title属性的toString方法</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095152941.png" alt="image-20250102095152941">
<figcaption aria-hidden="true">image-20250102095152941</figcaption>
</figure>
<h2 id="代码调用链">代码调用链</h2>
<p>多图杀猫警告。</p>
<p>首先入口点</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095259358.png" alt="image-20250102095259358">
<figcaption aria-hidden="true">image-20250102095259358</figcaption>
</figure>
<p>经过以下一系列变换到达我们函数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095336395.png" alt="image-20250102095336395">
<figcaption aria-hidden="true">image-20250102095336395</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095345847.png" alt="image-20250102095345847">
<figcaption aria-hidden="true">image-20250102095345847</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095351067.png" alt="image-20250102095351067">
<figcaption aria-hidden="true">image-20250102095351067</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095357497.png" alt="image-20250102095357497">
<figcaption aria-hidden="true">image-20250102095357497</figcaption>
</figure>
<p>接下来除了必要说明，会一直贴图顺序调用</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095450346.png" alt="image-20250102095450346">
<figcaption aria-hidden="true">image-20250102095450346</figcaption>
</figure>
<p>通过debug直到进入了give_gateway_offline，这大概是请求包这里自定义的（还记得我们之前业务发送请求包的时候选择的支付方式是offline吗）</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095553604.png" alt="image-20250102095553604">
<figcaption aria-hidden="true">image-20250102095553604</figcaption>
</figure>
<p>查询对应函数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095602524.png" alt="image-20250102095602524">
<figcaption aria-hidden="true">image-20250102095602524</figcaption>
</figure>
<p>进入对应函数的42到44行，发现是匿名函数的调用</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095612042.png" alt="image-20250102095612042">
<figcaption aria-hidden="true">image-20250102095612042</figcaption>
</figure>
<p>我们从这里继续</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095845999.png" alt="image-20250102095845999">
<figcaption aria-hidden="true">image-20250102095845999</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102095851204.png" alt="image-20250102095851204">
<figcaption aria-hidden="true">image-20250102095851204</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100127544.png" alt="image-20250102100127544">
<figcaption aria-hidden="true">image-20250102100127544</figcaption>
</figure>
<p>其内部实际上也还是执行do_action，如下图</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100144501.png" alt="image-20250102100144501">
<figcaption aria-hidden="true">image-20250102100144501</figcaption>
</figure>
<p>查询对应函数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100215578.png" alt="image-20250102100215578">
<figcaption aria-hidden="true">image-20250102100215578</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100227867.png" alt="image-20250102100227867">
<figcaption aria-hidden="true">image-20250102100227867</figcaption>
</figure>
<p>在 PHP 中，<code>__invoke</code>
是一个魔术方法，当试图将对象当作函数来调用时会被触发。</p>
<p>上面在new了对象后，调用了该对象的__invoke函数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100352906.png" alt="image-20250102100352906">
<figcaption aria-hidden="true">image-20250102100352906</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100358458.png" alt="image-20250102100358458">
<figcaption aria-hidden="true">image-20250102100358458</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100409034.png" alt="image-20250102100409034">
<figcaption aria-hidden="true">image-20250102100409034</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100414516.png" alt="image-20250102100414516">
<figcaption aria-hidden="true">image-20250102100414516</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100430425.png" alt="image-20250102100430425">
<figcaption aria-hidden="true">image-20250102100430425</figcaption>
</figure>
<p>我们可以观察上图传入该函数的content内容</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100935049.png" alt="image-20250102100935049">
<figcaption aria-hidden="true">image-20250102100935049</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100444042.png" alt="image-20250102100444042">
<figcaption aria-hidden="true">image-20250102100444042</figcaption>
</figure>
<p>preg_replace_callback是php的方法，简单说就是查询类似{name}
{siteurl}等大括号tag内容，然后执行本对象的do_tag方法</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102100521420.png" alt="image-20250102100521420">
<figcaption aria-hidden="true">image-20250102100521420</figcaption>
</figure>
<p>这部分就是对content中每个tag如{site_url}进行识别，然后分配到对应的执行函数中。</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101000579.png" alt="image-20250102101000579">
<figcaption aria-hidden="true">image-20250102101000579</figcaption>
</figure>
<p>通过{name} 的tag，我们进入下一个函数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101040714.png" alt="image-20250102101040714">
<figcaption aria-hidden="true">image-20250102101040714</figcaption>
</figure>
<p>可以查看该参数内容，title就是我们注入点</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101049069.png" alt="image-20250102101049069">
<figcaption aria-hidden="true">image-20250102101049069</figcaption>
</figure>
<p>如果进去give_get_payment_meta_user_info()内部的话，会发现它实际上是根据payment_id提取数据，然后进行了反序列化(maybe_unserialize是wordpress的检查并反序列化函数)。</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/1.png" alt="file://C:/Users/admin/AppData/Local/Temp/.B333Z2/1.png">
<figcaption aria-hidden="true">file://C:/Users/admin/AppData/Local/Temp/.B333Z2/1.png</figcaption>
</figure>
<p>回到刚才继续进入到give_get_email_names中</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101242437.png" alt="image-20250102101242437">
<figcaption aria-hidden="true">image-20250102101242437</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101247633.png" alt="image-20250102101247633">
<figcaption aria-hidden="true">image-20250102101247633</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101253721.png" alt="image-20250102101253721">
<figcaption aria-hidden="true">image-20250102101253721</figcaption>
</figure>
<p>最终到达上图的漏洞点，title的反序列化对象能触发tostring方法。</p>
<h2 id="利用链">利用链</h2>
<p>说实话让我构建我肯定构建不出来，而且这也不是我的重点，所以我就把分析过程简单放在下面了。</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\O:19:&quot;Stripe\\\\StripeObject&quot;:1:&#123;s:10:&quot;\0*\0_values&quot;;a:1:&#123;s:3:&quot;foo&quot;;O:62:&quot;Give\\\\PaymentGateways\\\\DataTransferObjects\\\\GiveInsertPaymentData&quot;:1:&#123;s:8:&quot;userInfo&quot;;a:1:&#123;s:7:&quot;address&quot;;O:4:&quot;Give&quot;:1:&#123;s:12:&quot;\0*\0container&quot;;O:33:&quot;Give\\\\Vendors\\\\Faker\\\\ValidGenerator&quot;:3:&#123;s:12:&quot;\0*\0validator&quot;;s:10:&quot;shell_exec&quot;;s:12:&quot;\0*\0generator&quot;;O:34:&quot;Give\\\\Onboarding\\\\SettingsRepository&quot;:1:&#123;s:11:&quot;\0*\0settings&quot;;a:1:&#123;s:8:&quot;address1&quot;;s:4:&quot;calc&quot;;&#125;&#125;s:13:&quot;\0*\0maxRetries&quot;;i:10;&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102102426340.png" alt="image-20250102102426340">
<figcaption aria-hidden="true">image-20250102102426340</figcaption>
</figure>
<p>直接从StripeObject类的__tostring方法开始</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101615455.png" alt="image-20250102101615455">
<figcaption aria-hidden="true">image-20250102101615455</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101629885.png" alt="image-20250102101629885">
<figcaption aria-hidden="true">image-20250102101629885</figcaption>
</figure>
<p>获取字典_values中每个key对应的value</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102101643310.png" alt="image-20250102101643310">
<figcaption aria-hidden="true">image-20250102101643310</figcaption>
</figure>
<p>根据payload内容直到，我们是只有一个userInfo属性的GiveInsertPaymentData对象</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103103015.png" alt="image-20250102103103015">
<figcaption aria-hidden="true">image-20250102103103015</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103011266.png" alt="image-20250102103011266">
<figcaption aria-hidden="true">image-20250102103011266</figcaption>
</figure>
<p>继续</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103134879.png" alt="image-20250102103134879">
<figcaption aria-hidden="true">image-20250102103134879</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103143356.png" alt="image-20250102103143356">
<figcaption aria-hidden="true">image-20250102103143356</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103153730.png" alt="image-20250102103153730">
<figcaption aria-hidden="true">image-20250102103153730</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103201048.png" alt="image-20250102103201048">
<figcaption aria-hidden="true">image-20250102103201048</figcaption>
</figure>
<p>userInfo['address']
中的内容是一个类对象Give，上图中赋值语句触发了Give对象的_get方法</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103637000.png" alt="image-20250102103637000">
<figcaption aria-hidden="true">image-20250102103637000</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103648780.png" alt="image-20250102103648780">
<figcaption aria-hidden="true">image-20250102103648780</figcaption>
</figure>
<p>上图中触发container对象ValidGenerator的get方法，但实际上并不存在，因此触发该对象的__call方法，即我们最终调用函数的方法</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103808056.png" alt="image-20250102103808056">
<figcaption aria-hidden="true">image-20250102103808056</figcaption>
</figure>
<p>我们可以观察方法传入了什么参数</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103846223.png" alt="image-20250102103846223">
<figcaption aria-hidden="true">image-20250102103846223</figcaption>
</figure>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102103850477.png" alt="image-20250102103850477">
<figcaption aria-hidden="true">image-20250102103850477</figcaption>
</figure>
<p>然后再看看执行参数分别是什么内容</p>
<p><img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104403036.png" alt="image-20250102104403036"><img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104417980.png" alt="image-20250102104417980"><img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104441820.png" alt="image-20250102104441820"></p>
<p>payload中我们知道generator中的对象是
SettingsRepository，他确实有个对象get</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104703241.png" alt="image-20250102104703241">
<figcaption aria-hidden="true">image-20250102104703241</figcaption>
</figure>
<p>简单说，执行settingsRepository的get()函数，获取了address1中的字符串calc</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104934451.png" alt="image-20250102104934451">
<figcaption aria-hidden="true">image-20250102104934451</figcaption>
</figure>
<p>最后根据maxRetries，调用了maxRetries次数的最终执行
shell_exec('calc')</p>
<figure>
<img src="/2025/01/02/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/imgs/CVE-2024-5932-CVE-2024-8353-wordpress%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20250102104950996.png" alt="image-20250102104950996">
<figcaption aria-hidden="true">image-20250102104950996</figcaption>
</figure>
<h2 id="参考链接">参考链接</h2>
<ol type="1">
<li>https://xz.aliyun.com/t/15699?time__1311=GqjxnieDqYqmqGNPeeqBK0QG8W7vTwh3EbD</li>
<li>https://github.com/EQSTLab/CVE-2024-8353/tree/main</li>
</ol>
]]></content>
      <categories>
        <category>php审计</category>
      </categories>
      <tags>
        <tag>php审计</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>java审计1:ModelAttribute</title>
    <url>/2024/10/10/java%E5%AE%A1%E8%AE%A11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言">前言</h2>
<p>本章节是按照 <a href="https://aluvion.github.io/2019/04/02/%E8%87%AA%E5%8A%A8%E7%BB%91%E5%AE%9A%E6%BC%8F%E6%B4%9E-war%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/">文章</a>
进行 <span class="citation" data-cites="ModelAttribute">@ModelAttribute</span>
功能点的漏洞审计，以及实际debug中各种执行。</p>
<p>程序 shop1.war可以在原博客主中下载。</p>
<span id="more"></span>
<h2 id="配置debug环境">配置debug环境</h2>
<p>tomcat + idea 远程调试代码</p>
<p><strong>1.安装tomcat</strong></p>
<p>• Tomcat 9.x：支持 Java 8、Java 11、Java 17（及更高版本）。</p>
<p>• Tomcat 10.x：要求 Java 11 或更高版本，主要用于支持 Servlet 4.0
规范及其相关特性。</p>
<p>主机里只有1.8，因此我们用的tomcat 9</p>
<p>https://tomcat.apache.org/download-90.cgi</p>
<p>点击如下zip进行下载</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010202936176.png" alt="image-20241010202936176">
<figcaption aria-hidden="true">image-20241010202936176</figcaption>
</figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip apache-tomcat-9.0.95.zip</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> apache-tomcat-9.0.95/</span><br><span class="line"></span><br><span class="line">$ TC=$(<span class="built_in">pwd</span>)</span><br></pre></td></tr></table></figure>
<p><strong>2.war包存放路径</strong></p>
<p>$TC/webapps/shop-1.0.0.war</p>
<p><strong>3.tomcat开启远程调试端口</strong></p>
<p>修改文件 catalina.sh，在注释后第一行添加如下</p>
<p>CATALINA_OPTS="-Xdebug
-Xrunjdwp:transport=dt_socket,address=<strong>8000</strong>,suspend=n,server=y"</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010203111195.png" alt="image-20241010203111195">
<figcaption aria-hidden="true">image-20241010203111195</figcaption>
</figure>
<p>apache开启与关闭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$TC</span>/bin/catalina.sh start</span><br><span class="line"></span><br><span class="line"><span class="variable">$TC</span>/bin/catalina.sh stop</span><br></pre></td></tr></table></figure>
<p>检测调试端口是否开启成功</p>
<p>netstat -tuln | grep 8000</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010203208761.png" alt="image-20241010203208761">
<figcaption aria-hidden="true">image-20241010203208761</figcaption>
</figure>
<p>如果你想url的根路径就是你的war包的话，可以修改/opt/apache-tomcat-9.0.17/conf/server.xml</p>
<blockquote>
<p><Host name="localhost" appbase unpackwars="true" autodeploy="true"></Host></p>
<p><Context path docbase="/home/student/FSWA/module-2/apache-tomcat-9.0.95/webapps/shop-1.0.0" debug="0" reloadable="true" crosscontext="true"></Context></p>
</blockquote>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010203315018.png" alt="image-20241010203315018">
<figcaption aria-hidden="true">image-20241010203315018</figcaption>
</figure>
<p>默认web服务开放端口8080</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010203330170.png" alt="image-20241010203330170">
<figcaption aria-hidden="true">image-20241010203330170</figcaption>
</figure>
<p>开启apache后，通过浏览器访问即可</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010203442840.png" alt="image-20241010203442840">
<figcaption aria-hidden="true">image-20241010203442840</figcaption>
</figure>
<p><strong>4.idea2024配置</strong></p>
<p>由于我们是war包，因此得反编译相同结构的java文件内容才行。</p>
<p>如果是当前项目打包好的war放到tomcat中直接debug应该是没啥问题的，但如果是war包反编译弄成java代码后进行debug的话，可能会有行数不一致的情况</p>
<p>在classes文件夹隔壁，新创建一个java文件夹</p>
<p>打开如下设置</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145226148.png" alt="image-20241011145226148">
<figcaption aria-hidden="true">image-20241011145226148</figcaption>
</figure>
<p>选择刚才新创建的java文件夹，然后按照如下进行设置</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145243568.png" alt="image-20241011145243568">
<figcaption aria-hidden="true">image-20241011145243568</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145256100.png" alt="image-20241011145256100">
<figcaption aria-hidden="true">image-20241011145256100</figcaption>
</figure>
<p>然后吧classes中所有文件复制过去，把.class文件换成反编译后的.java文件</p>
<p>当然，弄过去后会一堆报错，但实际没关系，关闭语法报错提示正常调试</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145327715.png" alt="image-20241011145327715">
<figcaption aria-hidden="true">image-20241011145327715</figcaption>
</figure>
<p>java文件滑动条这里右键出来</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/1.png" alt="file://C:/Users/admin/AppData/Local/Temp/.MWY8U2/1.png">
<figcaption aria-hidden="true">file://C:/Users/admin/AppData/Local/Temp/.MWY8U2/1.png</figcaption>
</figure>
<p>接下来配置调试器</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145449711.png" alt="image-20241011145449711">
<figcaption aria-hidden="true">image-20241011145449711</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145454446.png" alt="image-20241011145454446">
<figcaption aria-hidden="true">image-20241011145454446</figcaption>
</figure>
<p>关联到之前apache开放的调试端口</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145507746.png" alt="image-20241011145507746">
<figcaption aria-hidden="true">image-20241011145507746</figcaption>
</figure>
<h2 id="开始调试">开始调试</h2>
<p>在 Java Web
开发中，框架默认是否开启<strong>参数自动绑定</strong>取决于所使用的框架。Spring
MVC
框架默认开启自动绑定，会根据请求中的参数自动将其绑定到控制器方法中的对象或参数。</p>
<p><strong>对象绑定</strong>：当请求中的参数名与对象的属性名一致时，Spring
MVC 会自动将请求参数的值绑定到对象的对应属性上。例如：</p>
<p>如果请求中有 balance=100 这样的参数，Spring 会将其自动赋值给 user
对象中的 balance 属性。</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241010202743976.png" alt="image-20241010202743976">
<figcaption aria-hidden="true">image-20241010202743976</figcaption>
</figure>
<h3 id="buy路径">1.buy路径</h3>
<p>路由中我们看到buy路径有 <span class="citation" data-cites="ModelAttribute">@ModelAttribute</span> 修饰的对象 user</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145557343.png" alt="image-20241011145557343">
<figcaption aria-hidden="true">image-20241011145557343</figcaption>
</figure>
<p>这意味着我们能够修改user中的任意属性</p>
<p>我们查看他有哪些属性</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145608992.png" alt="image-20241011145608992">
<figcaption aria-hidden="true">image-20241011145608992</figcaption>
</figure>
<p>我们能看到代码中有一段使用了setBalance将修改当前的user对象内容。（自动绑定我理解为只是在当前函数中，使用到该参数时，才替换成我们绑定的值，但对象实际的值并不会修改）</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145640382.png" alt="image-20241011145640382">
<figcaption aria-hidden="true">image-20241011145640382</figcaption>
</figure>
<p>那么我们修改user对象中balance的值，就能够修改当前user.getBalance()的内容了。</p>
<p>当然，源代码中也有对该参数进行禁止绑定的配置，但是能够通过大小写进行绕过。</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145652303.png" alt="image-20241011145652303">
<figcaption aria-hidden="true">image-20241011145652303</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145658795.png" alt="image-20241011145658795">
<figcaption aria-hidden="true">image-20241011145658795</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145704590.png" alt="image-20241011145704590">
<figcaption aria-hidden="true">image-20241011145704590</figcaption>
</figure>
<h3 id="profile路径">2.profile路径</h3>
<p>除了/buy以外，/profile也使用了 <span class="citation" data-cites="ModelAttribute">@ModelAttribute</span> 修饰user</p>
<p>并且注意到cart.add中利用user的内容进行添加。</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145757832.png" alt="image-20241011145757832">
<figcaption aria-hidden="true">image-20241011145757832</figcaption>
</figure>
<p>那么我们把productId为4的flag添加到我们购物车中即可</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145807571.png" alt="image-20241011145807571">
<figcaption aria-hidden="true">image-20241011145807571</figcaption>
</figure>
<p>还是先debug查看需要什么</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145818220.png" alt="image-20241011145818220">
<figcaption aria-hidden="true">image-20241011145818220</figcaption>
</figure>
<p>那么我们修改这个id即可，注意User中对cart的赋值使用的是
setCartItems，因此传参的时候，传的是 cartItems（大小写应该无所谓）</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145829136.png" alt="image-20241011145829136">
<figcaption aria-hidden="true">image-20241011145829136</figcaption>
</figure>
<p>cartItems[0].id=4</p>
<p>因为是get请求，因此需要全部url编码</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145841144.png" alt="image-20241011145841144">
<figcaption aria-hidden="true">image-20241011145841144</figcaption>
</figure>
<p>（我应该设置的[0]，不过不知道为什么所有item都变了）</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145857520.png" alt="image-20241011145857520">
<figcaption aria-hidden="true">image-20241011145857520</figcaption>
</figure>
<p>当然，我们也能用post请求</p>
<p>别直接GET改POST，burp中有修改post功能，帮你添加上post需要的字段</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145909441.png" alt="image-20241011145909441">
<figcaption aria-hidden="true">image-20241011145909441</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145913975.png" alt="image-20241011145913975">
<figcaption aria-hidden="true">image-20241011145913975</figcaption>
</figure>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145923473.png" alt="image-20241011145923473">
<figcaption aria-hidden="true">image-20241011145923473</figcaption>
</figure>
<h3 id="注意">注意</h3>
<p>正如之前所说，自动绑定修改的是当前函数修饰的对象所用到的值，对象本身并没改变，因此刷新当前页面就恢复了</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011145949334.png" alt="image-20241011145949334">
<figcaption aria-hidden="true">image-20241011145949334</figcaption>
</figure>
<h2 id="修复">修复</h2>
<ol type="1">
<li></li>
</ol>
<p>使用 DTO 模式，在对象中放入能修改的字段，在后续进行更新</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011150017124.png" alt="image-20241011150017124">
<figcaption aria-hidden="true">image-20241011150017124</figcaption>
</figure>
<p>这样，就不能直接自动绑定到user的balance等字段了。</p>
<ol start="2" type="1">
<li></li>
</ol>
<p><span class="citation" data-cites="InitBinder">@InitBinder</span>：通过 WebDataBinder 的
setDisallowedFields() 方法指定哪些字段不被绑定。</p>
<p>如源程序中定义了如下</p>
<figure>
<img src="/2024/10/10/java%E5%AE%A1%E8%AE%A11/imgs/java%E5%AE%A1%E8%AE%A11/image-20241011150046952.png" alt="image-20241011150046952">
<figcaption aria-hidden="true">image-20241011150046952</figcaption>
</figure>
<p>但是由于大小写原因，使用Balance也能进行绑定。。</p>
<p>虽然也有办法检测传输来的参数然后进行手动验证，但感觉还是dto方式好点，直接禁了</p>
]]></content>
      <tags>
        <tag>java代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>jolokia exploit</title>
    <url>/2024/11/08/jolokia-exploit1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fafd55bc4690f15e06bf8f28774191cb326dffd87adc69a5c2b032562d583e51"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java审计</category>
      </categories>
      <tags>
        <tag>java审计</tag>
        <tag>jolokia</tag>
      </tags>
  </entry>
  <entry>
    <title>test_my_site</title>
    <url>/2024/10/07/test-my-site/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ccf6419c692ab8751ffa6a81e5b8762e7808dd79fc9ac2b9c56c92a408a832ba">10d79030e8222445804370796b90fca14b3382df4730eb0fe3a9f1aa6acbfdf977f308135c251cf4014cb9472e5eb4c7010efd08fb0e3bdf1ebef1844b47b7bbdce99f87d5af857ca0ff659bfd7ff8403889b6c438821c099230c528e1e072086db67c3268f0c3fbef4285ecdfb74d10c44a10a54b42bc087ce2562c8b1b0d82c747e40ef6687175228e1aa7de665ca0630685dfdfd49a11eb58a99d311c252752a333719030d038bb8d865dd3e440bff3cd209fe3ca3a26fb5772705760421ee28b997bb286ef46d1032c18074a8e2467687ee2de62e54453291130c47094a422bc930e55aadd9d024a587e442f34bf75eb6a08da22b9f89a8b762f5a38a8e3a8b6d43600412acf0623cf3a3b747ac864e776763348894aa98e8cd5539f9ac220705086caf84a5b1c6a6382a2e4ff83f3d6637e7c85fae0a0f7004386529b724242ee75321cf795f12644e488658ff68cf16896af7bf555fa8b93ec75ab1057f199f58cd7c3db867a57ba813c4dbc1d75101b3d4848d76d5dbaa12389f95ea28cf57a2029b69088746dd474de449fe6f474e8f187cc960400495d89323d91c99a8458d1f9e9fe3db7b6e594a48934168f1de2281b67c6f2a26e120da1b4804d637373f68baa7d9522a3fc191c2a903e5afb423414e97cd6ad6aca3319cbb12a1dc5c344f8664e215603d0f7a47c233345eedd61fa11405373b21acbd1fe5633a6fd41a404caab5fb639598a4dab62966b5d2e536da3c155049576eb456d853ff8a917cdc7cd0f6e3cab229222a71fccbb3adffd8fe409b9ed5d9f4aea0b900b12938d6a3fa0ed2c63874400be6a43ec5f70f1e882d9bd3829a6593bb17bf0000f6348632400afba9efb7542277c34ac527c090142afaabb4a08c1a1bfacbc4ae19417e7ecb8e745bbdea16a437a0b5db0efe2ab3a10d22d9ad1502b0bbcfde293c82a29a4c0db89708fb6f4865e7423d2f6adeaa1ba96ba2d868791873dd359a7093462f239e6b577599dc9e07c33f3ca30dea580180fbf37b9df77678469cedcce74dec8f0fd0a26faab62af0fceca0ae9fa4582c60c3f2d7b2cc164a6e64409d943fe13715aa3de75a61fa32d39179449c3d2f26a6c146b90ff4e3a952672ad7a123a690b29b56e228cded848ff876b79a4a21704bbef8a50b468468727765af8c7505f646f224d18d9af92e98d69f3538910bd5c15f7dea29122d9d6535074681af752a853c951b98999878d652520b4da5e25a25ea1c8ab624de05dc66a0482bf9f58b1a3828ad37cffadcf309c9f0f1be2096d51fc543230ef90f3ffdb680cae403fb41260a816f2998466578141a0ae9b0114db7c039eb7fb6a053e0e358866643eac7365e0a30695d3d69878fa44ae2b848b08188176449c482acd17a78d087662e2c47bd4b313c79c5cb5656347c67fa2cca7d8c3d744805dce4f9a9bb0eb9e8b29a8dfe3c00cec6331360baf06484358b87a40c3c69177d6e40397</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>jQuery_1_test</tag>
        <tag>jQuery_1_test2 3</tag>
      </tags>
  </entry>
  <entry>
    <title>jolokia rce vulnerability</title>
    <url>/2024/12/03/jolokia-rce-vulnerability/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0d2f02829670831de636045cef3a6c764cc04b9a1c2c6083fbd82163e5887c42"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java审计</category>
      </categories>
      <tags>
        <tag>java审计</tag>
        <tag>jolokia</tag>
      </tags>
  </entry>
  <entry>
    <title>3.2 线性回归从零开始实现</title>
    <url>/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言">1前言</h2>
<p>从零开始学习ai文章系列计划是个人在《动手学深度学习》和《磨菇书》两本书的学习中的个人笔记，文章也会以课本中的章节分开，即每个章节一片笔记。我会尽量的把主要内容以及遇到的难点进行记录与解决，如果哪里有错误的欢迎指正。或者不清晰的可以直接查看原文部分。</p>
<span id="more"></span>
<p>《动手学深度学习》原文（课本）：https://tangshusen.me/Dive-into-DL-PyTorch/#/</p>
<p>《动手学深度学习》代码：https://github.com/ShusenTang/Dive-into-DL-PyTorch</p>
<p>（由于有时候公式太多，可能会直接贴图片）</p>
<p>在了解了线性回归的背景知识之后，现在我们可以动手实现它了。尽管强大的深度学习框架可以减少大量重复性工作，但若过于依赖它提供的便利，会导致我们很难深入理解深度学习是如何工作的。因此，本节将介绍如何只利用<strong>Tensor</strong>和<strong>autograd</strong>来实现一个线性回归的训练。</p>
<p>首先，导入本节中实验所需的包或模块，其中的matplotlib包可用于作图，且设置成嵌入显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>
<h2 id="构造一个简单的人工训练数据集">2
构造一个简单的人工训练数据集</h2>
<p>设训练数据集<strong>样本数为1000</strong>，输入个数<strong>（特征数）为2</strong>。给定随机生成的批量样本特征X，使用线性回归模型真实权重
<span class="math inline">\(w=[2,−3.4]^⊤\)</span> 和偏差
b=4.2，以及一个随机噪声项 ϵ 来生成标签 <span class="math display">\[
y=Xw+b+ϵ
\]</span> <strong>torch.randn</strong> 是 PyTorch
中用于生成服从<strong>标准正态分布</strong>（均值为 0，标准差为
1）的随机张量的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_inputs = <span class="number">2</span></span><br><span class="line">num_examples = <span class="number">1000</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># features是一个行数为num_examples，列数为num_inputs的张量，其每个内容都是从正态分布弄出来的随机数</span></span><br><span class="line">features = torch.randn(num_examples, num_inputs, dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  features中每行进行=&gt;  第一列与第一个w相乘  +  第二列与第二个w相乘  + b</span></span><br><span class="line"><span class="comment">#  生成与features同行数的张量labels</span></span><br><span class="line">labels = true_w[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] + true_b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(labels))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(labels))</span><br><span class="line"></span><br><span class="line"><span class="comment"># labels中每个数也加上噪音</span></span><br><span class="line">labels += torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=labels.size()),</span><br><span class="line">                       dtype=torch.float32)</span><br></pre></td></tr></table></figure>
<h2 id="读取数据">3.读取数据</h2>
<figure>
<img src="/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/image-20250228143122160.png" alt="image-20250228143122160">
<figcaption aria-hidden="true">image-20250228143122160</figcaption>
</figure>
<p>上图中，j 通过torch.longTensor,获取了一个由标量组成的列表张量，如 [
1, 3, 4, 67, 22] 。</p>
<p>index_select(dim, index) 用于在<strong>指定维度 dim</strong>
上，根据索引 index 选择张量的特定元素。</p>
<p>features.index_select(<strong>0</strong>, j)：从 features
<strong>按行</strong>选择索引 j 对应的样本</p>
<p>函数执行后就直接从fetures与labels中返回对应大小行数的的tensor了</p>
<figure>
<img src="/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/image-20250228145747983.png" alt="image-20250228145747983">
<figcaption aria-hidden="true">image-20250228145747983</figcaption>
</figure>
<figure>
<img src="/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/image-20250228145800616.png" alt="image-20250228145800616">
<figcaption aria-hidden="true">image-20250228145800616</figcaption>
</figure>
<h2 id="初始化模型参数">4. 初始化模型参数</h2>
<p>将权重初始化成均值为0、标准差为0.01的正态随机数，偏差则初始化成0。之后的模型训练中，需要对这些参数求梯度来迭代参数的值，因此我们要让它们的requires_grad=True。</p>
<p>（可以看出这里是w是列向量）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_inputs, <span class="number">1</span>)), dtype=torch.float32)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">w.requires_grad_(requires_grad=<span class="literal">True</span>)</span><br><span class="line">b.requires_grad_(requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>## 5.定义模型</p>
<p>我们使用mm函数做矩阵乘法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):</span><br><span class="line">    <span class="keyword">return</span> torch.mm(X, w) + b</span><br></pre></td></tr></table></figure>
<h2 id="定义损失函数">6.定义损失函数</h2>
<p>使用上一节描述的平方损失来定义线性回归的损失函数。在实现中，我们需要把真实值y变形成预测值y_hat的形状。以下函数返回的结果也将和y_hat的形状相同。</p>
<p>这里的 y.view(y_hat.size()) 主要作用是让 y 的形状与 y_hat
保持一致，以便执行后续的减法运算 y_hat - y</p>
<p>y 的原始形状: torch.Size(<strong>[3]</strong>)</p>
<p>y 经过 view 变成: torch.Size(<strong>[3, 1]</strong>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def squared_loss(y_hat, y):</span><br><span class="line">    # 注意这里返回的是向量, 另外, pytorch里的MSELoss并没有除以 2</span><br><span class="line">    return (y_hat - y.view(y_hat.size())) ** 2 / 2</span><br></pre></td></tr></table></figure>
<h2 id="定义优化算法">7.定义优化算法</h2>
<p>以下的sgd函数实现了上一节中介绍的小批量随机梯度下降算法。它通过不断迭代模型参数来优化损失函数。这里自动求梯度模块计算得来的梯度是一个批量样本的梯度和。我们将它除以批量大小来得到平均值。</p>
<p><img src="/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/image-20250304100914564.png" alt="image-20250304100914564" style="zoom:80%;"></p>
<p>param.grad 和 param 的形状是完全相同的，这样可以逐元素计算梯度，并对
param 中的每个数值进行更新。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.data -= lr * param.grad / batch_size <span class="comment"># 注意这里更改param时用的param.data</span></span><br></pre></td></tr></table></figure>
<h2 id="训练模型">8.训练模型</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):  <span class="comment"># 训练模型一共需要num_epochs个迭代周期</span></span><br><span class="line">    <span class="comment"># 在每一个迭代周期中，会遍历训练数据所有样本一次（假设样本数能够被批量大小整除）。X和y分别是小批量样本的特征和标签</span></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = squared_loss(linreg(X, w, b), y).<span class="built_in">sum</span>()  <span class="comment"># l是有关小批量linreg(X, w, b)和y的损失</span></span><br><span class="line"></span><br><span class="line">        l.backward()  <span class="comment"># 小批量的损失对模型参数求梯度</span></span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用小批量随机梯度下降迭代模型参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不要忘了梯度清零</span></span><br><span class="line">        w.grad.data.zero_()</span><br><span class="line">        b.grad.data.zero_()</span><br><span class="line"></span><br><span class="line">    train_l = squared_loss(linreg(features, w, b), labels)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %f&#x27;</span> % (epoch + <span class="number">1</span>, train_l.mean().item()))</span><br></pre></td></tr></table></figure>
<p>训练完成后，我们可以比较学到的参数和用来生成训练集的真实参数。它们应该很接近。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(true_w, <span class="string">&#x27;\n&#x27;</span>, w)</span><br><span class="line"><span class="built_in">print</span>(true_b, <span class="string">&#x27;\n&#x27;</span>, b)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2025/02/28/%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A03-2/image-20250304101534565.png" alt="image-20250304101534565">
<figcaption aria-hidden="true">image-20250304101534565</figcaption>
</figure>
]]></content>
      <tags>
        <tag>ai</tag>
        <tag>动手学习深度学习</tag>
        <tag>第3节</tag>
      </tags>
  </entry>
  <entry>
    <title>《动手学深度学习》3.1 线性回归</title>
    <url>/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言">1前言</h2>
<p>从零开始学习ai文章系列计划是个人在《动手学深度学习》和《磨菇书》两本书的学习中的个人笔记，文章也会以课本中的章节分开，即每个章节一片笔记。我会尽量的把主要内容以及遇到的难点进行记录与解决，如果哪里有错误的欢迎指正。或者不清晰的可以直接查看原文部分。</p>
<span id="more"></span>
<p>《动手学深度学习》原文（课本）：https://tangshusen.me/Dive-into-DL-PyTorch/#/</p>
<p>《动手学深度学习》代码：https://github.com/ShusenTang/Dive-into-DL-PyTorch</p>
<p>（由于有时候公式太多，可能会直接贴图片）</p>
<h2 id="线性回归模型">2 线性回归模型</h2>
<p>线性回归，是一段连续值模型，即<strong>提供任意的(x1,x2,x3...)</strong>，都有其对应的<strong>唯一结果y</strong></p>
<p>线性回归（Linear
Regression）的核心思想就是<strong>找到一条最优的直线来拟合一堆数据点</strong>，使得预测值和真实值之间的误差最小。</p>
<p>假设y是房价，房屋面积是x1，房龄是x2。</p>
<p>其中 w1 和 w2 是权重（weight），b
是偏差（bias），且均为标量。它们是线性回归模型的参数（parameter）。</p>
<p><span class="math display">\[
\hat{y}{}^{(i)}={x}^{(i)}_{1}{w}_{1}+{x}^{(i)}_{2}{w}_{2}+b
\]</span> 假设y是房价，房屋面积是x1，房龄是x2。</p>
<p>其中 <span class="math inline">\({w}_{1}\)</span> 和 <span class="math inline">\({w}_{2}\)</span> 是权重（weight），<span class="math inline">\(b\)</span>
是偏差（bias），且均为标量。它们是线性回归模型的参数（parameter）。</p>
<h2 id="模型训练的概念">3.模型训练的概念</h2>
<h3 id="收集训练数据">3.1 收集训练数据</h3>
<p>采集的<strong>样本数为 n</strong>，<strong>索引为 i</strong> 的样本
<span class="math display">\[
\hat{y}{}^{(i)}={x}^{(i)}_{1}{w}_{1}+{x}^{(i)}_{2}{w}_{2}+b
\]</span> ​</p>
<h3 id="损失函数">3.2 损失函数</h3>
<p>所谓的损失，就是模型预测值<span class="math inline">\(\hat{y}\)</span>与实际值y之间的误差。</p>
<p>即我们当前的$ ({w}<em>{1},{w}</em>{2},b)<span class="math inline">\(固定情况下，输入\)</span>{x}<em>{1}，{x}</em>{2}<span class="math inline">\(经过模型计算获得的估计值\)</span>$ 和 样本中 <span class="math inline">\(({x}_{1},{x}_{2},y)\)</span>中已经有实际的y
之间的误差。</p>
<p>损失函数有许多,
这里使用的<strong>平方误差函数</strong>也称为平方损失（square loss）
<span class="math display">\[
{L}^{(i)}({w}_{1},{w}_{2},b)=\frac {1} {2}(\hat{y}^{(i)}−y(i))^2
\]</span> 由于有n个样本，我们选平均值作为整体的损失函数 <span class="math display">\[
{L}({w}_{1},{w}_{2},b)
=
\frac {1} {n}\sum ^{n}_{i=1} {L}^{(i)}({w}_{1},{w}_{2},b)
=
\frac {1} {n}\sum ^{n}_{i=1} {\frac {1} {2}(\hat{y}^{(i)}−y^{(i)})^{2} }
\]</span>
在线性回归中使用平方差作为损失函数有很多好处，最重要的一点在于它是一个<strong>凸函数</strong>，这意味着它只有一个最小值，确保了我们可以通过优化算法（如梯度下降）找到最优解。它的导数是连续且容易计算的，这使得求解优化问题变得更简单。</p>
<p>这样我们就能求出最优的参数 <span class="math inline">\(({w}_{1},{w}_{2},b)\)</span></p>
<h3 id="优化算法">3.3 优化算法</h3>
<p>当模型和损失函数形式较为简单时，上面的<strong>误差最小化问题的解可以直接用公式表达出来</strong>。这类解叫作<strong>解析解（analytical
solution）</strong></p>
<p>然而，大多数深度学习模型并没有解析解，只能<strong>通过优化算法有限次迭代模型参数</strong>来尽可能降低损失函数的值。这类解叫作<strong>数值解（numerical
solution）</strong>。</p>
<p>这里我们通过偏导数对 <span class="math inline">\(({w}_{1},{w}_{2},b)\)</span> 进行优化，使得模型的
<span class="math inline">\(({w}_{1},{w}_{2},b)\)</span>
越来越接近实际的 <span class="math inline">\(({w}_{1},{w}_{2},b)\)</span>
，也就是说我们在此通过模型求出它的数值解</p>
<h4 id="对偏导的解释">3.3.1 对偏导的解释</h4>
<p>我们知道一元方程中 <span class="math inline">\(y=a{x}^{2}\)</span>，x的导数是<span class="math inline">\(2ax\)</span>，同时也代表着该点<span class="math inline">\((x,y)\)</span>的斜率是<span class="math inline">\(2ax\)</span></p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250225233408156.png" alt="image-20250225233408156">
<figcaption aria-hidden="true">image-20250225233408156</figcaption>
</figure>
<p>在 <span class="math inline">\(x=0\)</span> 处，斜率/导数 <span class="math inline">\(ax=0\)</span>。这也是该函数最低点。</p>
<p>我们随机在<span class="math inline">\(x&gt;0\)</span>处选取点<span class="math inline">\(({x}_{1},{y}_{1})\)</span>，此时的斜率 <span class="math inline">\(2a{x}_{1}&gt;0\)</span>，那么优化更新<span class="math inline">\({x}_{1}\)</span>的时候 <span class="math inline">\(({x}_{1})&#39; = {x}_{1} - 2a{x}_{1}\)</span>
的话，$({x}<em>{1})' 必定在x<span class="math inline">\(1的左侧，即\)</span>{x}</em>{1}$<strong>减去该处的导数</strong>会向最低点的x==0移动。</p>
<p>在<span class="math inline">\(x&lt;0\)</span>处取值也是同理，<span class="math inline">\(2a{x}_{1}&lt;0\)</span>，那么<span class="math inline">\(({x}_{1})&#39; = {x}_{1} - 2a{x}_{1}\)</span>
的话，相当于<span class="math inline">\({x}_{1}\)</span>向右边移动。</p>
<p>那么这里说明一个问题，<strong>我们所求出来的偏导实际上要的只是这个值的正负</strong>，其数值大小并不重要（当然这里y=ax²中，x越大斜率越大的特点能加快到达最小值，但其它函数就不一定了）</p>
<p>倘若该 <span class="math inline">\(({x}_{1},{y}_{1})\)</span>
并非处于最低点的斜率k=0的位置的话，就会不断移动，最终到达该点（收敛）</p>
<p>（当然这就引出局部最优或者未到达局部最优但是斜率为0的位置等问题，应该以后其他课程会解决）</p>
<h3 id="继续">3.3.2 继续</h3>
<p>重新回到本章节的损失函数中，我们的目的是让模型预测的y尽可能接近真实数据<span class="math inline">\(\hat{y}\)</span>，因此损失越小越好。 <span class="math display">\[
{L}({w}_{1},{w}_{2},b)
=
\frac {1} {n}\sum ^{n}_{i=1} {L}^{(i)}({w}_{1},{w}_{2},b)
=
\frac {1} {n}\sum ^{n}_{i=1} {\frac {1} {2}(\hat{y}^{(i)}−y^{(i)})^{2} }
\]</span> 再解析y获得如下完整w参数的loss函数（手打公式打麻了）</p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226213039241.png" alt="image-20250226213039241">
<figcaption aria-hidden="true">image-20250226213039241</figcaption>
</figure>
<p>上面公式举例对<span class="math inline">\({w}_{1}\)</span>进行求导，利用链式法则 <span class="math display">\[
E=L^{(i)}={x}^{(i)}_{1}{w}_{1}+{x}^{(i)}_{2}{w}_{2}+b−y^{(i)}
\]</span></p>
<p><span class="math display">\[
J=E^2
\]</span></p>
<p><span class="math display">\[
\frac {∂J} {∂{w}_{1}}= \frac {∂J} {∂E}*\frac {∂E}
{∂{w}_{1}}=2E*{x}^{(i)}_{1}=2{x}^{(i)}_{1}({x}^{(i)}_{1}{w}_{1}+{x}^{(i)}_{2}{w}_{2}+b−y^{(i)})
\]</span></p>
<p>因此得到如下更新公式（2是常数所以去掉了）</p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226214637799.png" alt="image-20250226214637799">
<figcaption aria-hidden="true">image-20250226214637799</figcaption>
</figure>
<p>在上式中，<span class="math inline">\(∣B∣\)</span>
代表每个小批量中的样本个数（批量大小，batch size），<span class="math inline">\(η\)</span> 称作学习率（learning
rate）并取正数。</p>
<h2 id="线性回归的表示方法">4 线性回归的表示方法</h2>
<h3 id="神经网络图">4.1 神经网络图</h3>
<p>线性回归是一个单层神经网络</p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226215105779.png" alt="image-20250226215105779">
<figcaption aria-hidden="true">image-20250226215105779</figcaption>
</figure>
<p>输入<span class="math inline">\({x}_{1},{x}_{2}\)</span>等参数，接受并输出层o的内部的每个节点计算都类似
<span class="math inline">\(y={x}_{1}{w}_{1}+{x}_{2}{w}_{2}+b\)</span>
,然后该节点的输出为y。</p>
<h3 id="矢量计算表达式">4.2 矢量计算表达式</h3>
<p>举例3个数据，每个数据2个特征，进行如下计算获得3个输出 <span class="math display">\[
\hat{y}^{(1)}=x^{(1)}_{1}w_{1}+x^{(1)}_{2}w_{1}+b
\\
\hat{y}^{(2)}=x^{(2)}_{1}w_{1}+x^{(2)}_{2}w_{1}+b
\\
\hat{y}^{(3)}=x^{(3)}_{1}w_{1}+x^{(3)}_{2}w_{1}+b
\]</span> 现在，我们将上面3个等式转化成矢量计算。设 <span class="math display">\[
\mathbf{\hat{y}} = \begin{bmatrix} \hat{y}^{(1)} \\ \hat{y}^{(2)} \\
\hat{y}^{(3)} \end{bmatrix} \quad
\mathbf{X} = \begin{bmatrix} x^{(1)}_{1}&amp;x^{(1)}_{2} \\
x^{(2)}_{1}&amp;x^{(2)}_{2} \\ x^{(3)}_{1}&amp;x^{(3)}_{2} \end{bmatrix}
\quad
\mathbf{w} = \begin{bmatrix} w_1 \\ w_2  \end{bmatrix}
\]</span></p>
<p>行列式计算为 <span class="math display">\[
\mathbf{\hat{y}}=\mathbf{X}\mathbf{w}+b
\]</span> 原本的损失函数变成矢量如下</p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226221037001.png" alt="image-20250226221037001">
<figcaption aria-hidden="true">image-20250226221037001</figcaption>
</figure>
<p>小批量随机梯度下降的迭代步骤将相应地改写为</p>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226221057789.png" alt="image-20250226221057789">
<figcaption aria-hidden="true">image-20250226221057789</figcaption>
</figure>
<figure>
<img src="/2025/02/25/%E5%8A%A8%E6%89%8B%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A01/image-20250226221104631.png" alt="image-20250226221104631">
<figcaption aria-hidden="true">image-20250226221104631</figcaption>
</figure>
]]></content>
      <tags>
        <tag>ai</tag>
        <tag>动手学习深度学习</tag>
        <tag>第3节</tag>
      </tags>
  </entry>
</search>
